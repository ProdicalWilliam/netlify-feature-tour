<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pixel Dungeon Crawler</title>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            background-color: #111;
            font-family: 'Press Start 2P', cursive, Arial, sans-serif;
            color: white;
            overflow: hidden;
        }
        #gameContainer {
            position: relative;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        canvas {
            border: 4px solid #444;
            background-color: #000;
            max-width: 800px;
            max-height: 600px;
            width: 100%;
            height: 100%;
            image-rendering: pixelated;
        }
        .menu {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: rgba(0, 0, 0, 0.8);
            z-index: 10;
        }
        .menu h1 {
            font-size: 36px;
            margin-bottom: 40px;
            text-shadow: 0 0 10px #7E57C2;
            text-align: center;
        }
        .menu-btn {
            background-color: #7E57C2;
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 18px;
            margin: 10px;
            cursor: pointer;
            transition: all 0.3s;
            border-radius: 5px;
            font-family: inherit;
        }
        .menu-btn:hover {
            background-color: #9575CD;
            transform: scale(1.05);
        }
        .hidden {
            display: none !important;
        }
        #gameUI {
            position: absolute;
            top: 0;
            left: 0;
            padding: 10px;
            color: white;
            font-size: 16px;
            text-shadow: 1px 1px 2px black;
        }
        #importExportPopup {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #2D2D2D;
            padding: 20px;
            border-radius: 5px;
            width: 80%;
            max-width: 500px;
            z-index: 20;
        }
        textarea {
            width: 100%;
            height: 150px;
            margin: 10px 0;
            background-color: #444;
            color: white;
            border: 1px solid #555;
            padding: 10px;
            font-family: monospace;
        }
        .popup-btns {
            display: flex;
            justify-content: space-between;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        
        <div id="mainMenu" class="menu">
            <h1>PIXEL DUNGEON CRAWLER</h1>
            <button id="newGameBtn" class="menu-btn">NEW GAME</button>
            <button id="continueGameBtn" class="menu-btn">CONTINUE GAME</button>
            <button id="importExportBtn" class="menu-btn">IMPORT/EXPORT</button>
        </div>

        <div id="gameOverMenu" class="menu hidden">
            <h1>GAME OVER</h1>
            <p id="gameOverStats"></p>
            <button id="restartBtn" class="menu-btn">RESTART</button>
            <button id="mainMenuBtn" class="menu-btn">MAIN MENU</button>
        </div>

        <div id="gameUI" class="hidden">
            <div id="waveInfo">Wave: 1/10</div>
            <div id="healthInfo">Health: 100</div>
            <div id="playersInfo">Players: 1</div>
        </div>

        <div id="importExportPopup" class="hidden">
            <h2>Import/Export Game Data</h2>
            <textarea id="importExportData" placeholder="Paste game data here to import or copy current data to export"></textarea>
            <div class="popup-btns">
                <button id="importBtn" class="menu-btn">IMPORT</button>
                <button id="exportBtn" class="menu-btn">EXPORT</button>
                <button id="closePopupBtn" class="menu-btn">CLOSE</button>
            </div>
        </div>
    </div>

    <script>
        // Initialize Firebase with your config
        const firebaseConfig = {
            apiKey: "AIzaSyAitmCSr78xBsi1V9pMMqItZfuRQLbOeQ4",
            authDomain: "hidden-2ebfd.firebaseapp.com",
            databaseURL: "https://hidden-2ebfd-default-rtdb.firebaseio.com",
            projectId: "hidden-2ebfd",
            storageBucket: "hidden-2ebfd.firebasestorage.app",
            messagingSenderId: "909253890376",
            appId: "1:909253890376:web:5b2f40be3916cdd96ce37d",
            measurementId: "G-B3YK7F9TBT"
        };

        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        // Game variables
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        
        // Set canvas size to match the container
        function resizeCanvas() {
            const container = document.getElementById('gameContainer');
            const containerWidth = container.clientWidth;
            const containerHeight = container.clientHeight;
            
            // Keep aspect ratio 4:3
            let canvasWidth, canvasHeight;
            
            if (containerWidth / containerHeight > 4/3) {
                canvasHeight = Math.min(containerHeight, 600);
                canvasWidth = canvasHeight * 4/3;
            } else {
                canvasWidth = Math.min(containerWidth, 800);
                canvasHeight = canvasWidth * 3/4;
            }
            
            canvas.width = 800;  // Internal resolution
            canvas.height = 600; // Internal resolution
            canvas.style.width = `${canvasWidth}px`;
            canvas.style.height = `${canvasHeight}px`;
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Game state
        let gameState = {
            scene: 'mainMenu', // mainMenu, game, gameOver
            playerId: null,
            players: {},
            dungeons: [],
            currentWave: 1,
            enemiesRemaining: 0,
            enemySpeed: 1,
            gameTime: 0,
            isMultiplayer: false
        };

        // Player class
        class Player {
            constructor(id, x, y) {
                this.id = id;
                this.x = x;
                this.y = y;
                this.width = 32;
                this.height = 48;
                this.speed = 3;
                this.health = 100;
                this.direction = 'down';
                this.isMoving = false;
                this.bullets = [];
                this.lastShot = 0;
                this.shootCooldown = 500; // milliseconds
                this.score = 0;
                this.sprite = new Image();
                this.sprite.src = 'https://static.vecteezy.com/system/resources/thumbnails/051/959/979/small/pixel-art-of-young-boy-in-casual-outfit-standing-pose-with-brown-hair-wearing-jacket-jeans-and-sneakers-detailed-sprite-for-videogame-projects-png.png';
            }

            update(keys) {
                this.isMoving = false;
                
                // Movement
                if (keys.ArrowUp && this.y > 0) {
                    this.y -= this.speed;
                    this.direction = 'up';
                    this.isMoving = true;
                }
                if (keys.ArrowDown && this.y < canvas.height - this.height) {
                    this.y += this.speed;
                    this.direction = 'down';
                    this.isMoving = true;
                }
                if (keys.ArrowLeft && this.x > 0) {
                    this.x -= this.speed;
                    this.direction = 'left';
                    this.isMoving = true;
                }
                if (keys.ArrowRight && this.x < canvas.width - this.width) {
                    this.x += this.speed;
                    this.direction = 'right';
                    this.isMoving = true;
                }

                // Shooting
                const now = Date.now();
                if (keys.Space && now - this.lastShot > this.shootCooldown) {
                    this.shoot();
                    this.lastShot = now;
                }

                // Update bullets
                for (let i = this.bullets.length - 1; i >= 0; i--) {
                    this.bullets[i].update();
                    if (this.bullets[i].isOffScreen()) {
                        this.bullets.splice(i, 1);
                    }
                }
            }

            shoot() {
                let bulletX = this.x + this.width / 2;
                let bulletY = this.y + this.height / 2;
                let velocityX = 0;
                let velocityY = 0;
                
                switch (this.direction) {
                    case 'up':
                        velocityY = -7;
                        break;
                    case 'down':
                        velocityY = 7;
                        break;
                    case 'left':
                        velocityX = -7;
                        break;
                    case 'right':
                        velocityX = 7;
                        break;
                }
                
                this.bullets.push(new Bullet(bulletX, bulletY, velocityX, velocityY));
            }

            draw() {
                // Draw player sprite
                ctx.drawImage(this.sprite, this.x, this.y, this.width, this.height);
                
                // Draw health bar
                ctx.fillStyle = 'red';
                ctx.fillRect(this.x, this.y - 10, this.width, 5);
                ctx.fillStyle = 'green';
                ctx.fillRect(this.x, this.y - 10, this.width * (this.health / 100), 5);
                
                // Draw bullets
                this.bullets.forEach(bullet => {
                    bullet.draw();
                });
            }
        }

        // Bullet class
        class Bullet {
            constructor(x, y, velocityX, velocityY) {
                this.x = x;
                this.y = y;
                this.radius = 3;
                this.velocityX = velocityX;
                this.velocityY = velocityY;
                this.speed = 7;
                this.damage = 20;
            }

            update() {
                this.x += this.velocityX;
                this.y += this.velocityY;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = '#FFD700';
                ctx.fill();
                ctx.closePath();
            }

            isOffScreen() {
                return (
                    this.x < 0 ||
                    this.x > canvas.width ||
                    this.y < 0 ||
                    this.y > canvas.height
                );
            }
        }

        // Enemy class
        class Enemy {
            constructor(x, y, type, wave) {
                this.x = x;
                this.y = y;
                this.type = type;
                this.width = 30;
                this.height = 30;
                this.speed = 1 + (wave * 0.1);
                this.health = 30 + (wave * 10);
                this.maxHealth = this.health;
                this.color = this.getColorByType(type);
                this.targetPlayer = null;
                this.scoreValue = 10 * wave;
            }

            getColorByType(type) {
                const colors = {
                    'basic': '#FF4136',
                    'fast': '#FF851B',
                    'tank': '#B10DC9',
                };
                return colors[type] || '#FF4136';
            }

            update(players) {
                // Find closest player
                let closestDist = Infinity;
                let closestPlayer = null;
                
                for (const id in players) {
                    const player = players[id];
                    const dist = Math.hypot(player.x - this.x, player.y - this.y);
                    if (dist < closestDist) {
                        closestDist = dist;
                        closestPlayer = player;
                    }
                }
                
                this.targetPlayer = closestPlayer;
                
                if (this.targetPlayer) {
                    // Move towards target player
                    const dx = this.targetPlayer.x - this.x;
                    const dy = this.targetPlayer.y - this.y;
                    const dist = Math.hypot(dx, dy);
                    
                    if (dist > 0) {
                        const speedMultiplier = this.type === 'fast' ? 1.5 : 
                                            this.type === 'tank' ? 0.7 : 1;
                        
                        this.x += (dx / dist) * this.speed * speedMultiplier;
                        this.y += (dy / dist) * this.speed * speedMultiplier;
                    }
                }
            }

            draw() {
                // Draw enemy
                ctx.fillStyle = this.color;
                
                // Different shapes for different types
                if (this.type === 'basic') {
                    ctx.fillRect(this.x, this.y, this.width, this.height);
                } else if (this.type === 'fast') {
                    ctx.beginPath();
                    ctx.moveTo(this.x, this.y + this.height);
                    ctx.lineTo(this.x + this.width / 2, this.y);
                    ctx.lineTo(this.x + this.width, this.y + this.height);
                    ctx.fill();
                } else if (this.type === 'tank') {
                    ctx.beginPath();
                    ctx.arc(this.x + this.width/2, this.y + this.height/2, this.width/2, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                // Draw health bar
                ctx.fillStyle = 'red';
                ctx.fillRect(this.x, this.y - 10, this.width, 5);
                ctx.fillStyle = 'lightgreen';
                ctx.fillRect(this.x, this.y - 10, this.width * (this.health / this.maxHealth), 5);
            }

            checkCollision(player) {
                // Check collision with player
                if (
                    this.x < player.x + player.width &&
                    this.x + this.width > player.x &&
                    this.y < player.y + player.height &&
                    this.y + this.height > player.y
                ) {
                    return true;
                }
                return false;
            }

            checkBulletCollision(bullet) {
                // Check collision with bullet using circle-rectangle
                const distX = Math.abs(bullet.x - (this.x + this.width / 2));
                const distY = Math.abs(bullet.y - (this.y + this.height / 2));

                if (distX > (this.width / 2 + bullet.radius)) { return false; }
                if (distY > (this.height / 2 + bullet.radius)) { return false; }

                if (distX <= (this.width / 2)) { return true; }
                if (distY <= (this.height / 2)) { return true; }

                const dx = distX - this.width / 2;
                const dy = distY - this.height / 2;
                return (dx * dx + dy * dy <= (bullet.radius * bullet.radius));
            }
        }

        // Dungeon generator
        class DungeonGenerator {
            constructor(width, height, numRooms, wave) {
                this.width = width;
                this.height = height;
                this.numRooms = numRooms;
                this.wave = wave;
                this.grid = [];
                this.rooms = [];
                this.enemies = [];
                this.initGrid();
            }

            initGrid() {
                for (let y = 0; y < this.height; y++) {
                    this.grid[y] = [];
                    for (let x = 0; x < this.width; x++) {
                        this.grid[y][x] = 1; // 1 represents a wall
                    }
                }
            }

            generateDungeon() {
                // Generate rooms
                for (let i = 0; i < this.numRooms; i++) {
                    const roomWidth = Math.floor(Math.random() * 5) + 5;
                    const roomHeight = Math.floor(Math.random() * 5) + 5;
                    const roomX = Math.floor(Math.random() * (this.width - roomWidth - 2)) + 1;
                    const roomY = Math.floor(Math.random() * (this.height - roomHeight - 2)) + 1;
                    
                    // Create room
                    const room = {
                        x: roomX,
                        y: roomY,
                        width: roomWidth,
                        height: roomHeight,
                        centerX: Math.floor(roomX + roomWidth / 2),
                        centerY: Math.floor(roomY + roomHeight / 2)
                    };
                    
                    // Check for overlap with existing rooms
                    let overlaps = false;
                    for (const existingRoom of this.rooms) {
                        if (
                            room.x < existingRoom.x + existingRoom.width + 2 &&
                            room.x + room.width + 2 > existingRoom.x &&
                            room.y < existingRoom.y + existingRoom.height + 2 &&
                            room.y + room.height + 2 > existingRoom.y
                        ) {
                            overlaps = true;
                            break;
                        }
                    }
                    
                    if (!overlaps) {
                        this.rooms.push(room);
                        
                        // Carve out room
                        for (let y = room.y; y < room.y + room.height; y++) {
                            for (let x = room.x; x < room.x + room.width; x++) {
                                this.grid[y][x] = 0; // 0 represents an empty space
                            }
                        }
                    }
                }
                
                // Connect rooms with corridors
                for (let i = 0; i < this.rooms.length - 1; i++) {
                    const room1 = this.rooms[i];
                    const room2 = this.rooms[i + 1];
                    
                    // Connect centers of rooms horizontally then vertically
                    this.createHorizontalCorridor(room1.centerX, room2.centerX, room1.centerY);
                    this.createVerticalCorridor(room1.centerY, room2.centerY, room2.centerX);
                }
                
                // Populate with enemies
                this.populateEnemies();
                
                return {
                    grid: this.grid,
                    rooms: this.rooms,
                    enemies: this.enemies
                };
            }

            createHorizontalCorridor(x1, x2, y) {
                for (let x = Math.min(x1, x2); x <= Math.max(x1, x2); x++) {
                    this.grid[y][x] = 0;
                }
            }

            createVerticalCorridor(y1, y2, x) {
                for (let y = Math.min(y1, y2); y <= Math.max(y1, y2); y++) {
                    this.grid[y][x] = 0;
                }
            }

            populateEnemies() {
                // Basic formula for number of enemies based on wave
                const numEnemies = 3 + Math.floor(this.wave * 1.5);
                
                for (let i = 0; i < numEnemies; i++) {
                    const roomIndex = Math.floor(Math.random() * this.rooms.length);
                    const room = this.rooms[roomIndex];
                    
                    // Random position within the room
                    const x = Math.floor(Math.random() * (room.width - 2)) + room.x + 1;
                    const y = Math.floor(Math.random() * (room.height - 2)) + room.y + 1;
                    
                    // Determine enemy type based on wave and randomness
                    let type = 'basic';
                    const rng = Math.random();
                    
                    if (this.wave >= 3) {
                        if (rng < 0.3) {
                            type = 'fast';
                        } else if (rng < 0.5 && this.wave >= 5) {
                            type = 'tank';
                        }
                    }
                    
                    this.enemies.push(new Enemy(x * 20, y * 20, type, this.wave));
                }
                
                gameState.enemiesRemaining = this.enemies.length;
            }
        }

        // Controls
        const keys = {
            ArrowUp: false,
            ArrowDown: false,
            ArrowLeft: false,
            ArrowRight: false,
            Space: false
        };

        window.addEventListener('keydown', (e) => {
            if (keys.hasOwnProperty(e.code)) {
                keys[e.code] = true;
            }
        });

        window.addEventListener('keyup', (e) => {
            if (keys.hasOwnProperty(e.code)) {
                keys[e.code] = false;
            }
        });

        // Game initialization
        function init() {
            // Generate unique player ID
            gameState.playerId = 'player_' + Date.now();
            gameState.players[gameState.playerId] = new Player(gameState.playerId, canvas.width / 2, canvas.height / 2);
            
            // Firebase reference to the current game
            gameState.gameRef = database.ref('games/game_' + Date.now());
            
            // Generate first dungeon
            generateWave(1);
            
            // Update UI
            updateUI();
            
            // Start game loop
            gameLoop();
        }

        function generateWave(wave) {
            gameState.currentWave = wave;
            
            // Generate dungeon for current wave
            const dungeonSize = 40;
            const numRooms = 5 + Math.floor(wave * 0.5);
            
            const dungeonGenerator = new DungeonGenerator(dungeonSize, dungeonSize, numRooms, wave);
            const dungeon = dungeonGenerator.generateDungeon();
            
            gameState.grid = dungeon.grid;
            gameState.rooms = dungeon.rooms;
            gameState.enemies = dungeon.enemies;
            gameState.enemiesRemaining = dungeon.enemies.length;
            
            // Place player in first room
            const startRoom = dungeon.rooms[0];
            const player = gameState.players[gameState.playerId];
            player.x = (startRoom.centerX * 20);
            player.y = (startRoom.centerY * 20);
            
            // Update Firebase
            if (gameState.isMultiplayer) {
                gameState.gameRef.child('players/' + gameState.playerId).set({
                    x: player.x,
                    y: player.y,
                    health: player.health,
                    direction: player.direction
                });
                
                gameState.gameRef.child('wave').set(wave);
                gameState.gameRef.child('enemies').set(gameState.enemies.length);
            }
            
            updateUI();
        }

        function updateUI() {
            document.getElementById('waveInfo').textContent = `Wave: ${gameState.currentWave}/10`;
            document.getElementById('healthInfo').textContent = `Health: ${gameState.players[gameState.playerId].health}`;
            document.getElementById('playersInfo').textContent = `Players: ${Object.keys(gameState.players).length}`;
        }

        // Save game state to local storage
        function saveGame() {
            const saveData = {
                wave: gameState.currentWave,
                player: {
                    x: gameState.players[gameState.playerId].x,
                    y: gameState.players[gameState.playerId].y,
                    health: gameState.players[gameState.playerId].health,
                    score: gameState.players[gameState.playerId].score
                },
                enemies: gameState.enemies.map(enemy => ({
                    x: enemy.x,
                    y: enemy.y,
                    type: enemy.type,
                    health: enemy.health
                })),
                grid: gameState.grid,
                rooms: gameState.rooms
            };
            
            localStorage.setItem('dungeonCrawlerSave', JSON.stringify(saveData));
        }

        // Load game from local storage
        function loadGame() {
            const saveData = localStorage.getItem('dungeonCrawlerSave');
            
            if (saveData) {
                const data = JSON.parse(saveData);
                
                gameState.currentWave = data.wave;
                
                // Restore player
                const player = gameState.players[gameState.playerId];
                player.x = data.player.x;
                player.y = data.player.y;
                player.health = data.player.health;
                player.score = data.player.score;
                
                // Restore enemies
                gameState.enemies = data.enemies.map(e => {
                    const enemy = new Enemy(e.x, e.y, e.type, gameState.currentWave);
                    enemy.health = e.health;
                    return enemy;
                });
                
                gameState.grid = data.grid;
                gameState.rooms = data.rooms;
                gameState.enemiesRemaining = gameState.enemies.length;
                
                updateUI();
                return true;
            }
            
            return false;
        }

        // Export game data
        function exportGame() {
            const saveData = {
                wave: gameState.currentWave,
                player: {
                    x: gameState.players[gameState.playerId].x,
                    y: gameState.players[gameState.playerId].y,
                    health: gameState.players[gameState.playerId].health,
                    score: gameState.players[gameState.playerId].score
                },
                enemies: gameState.enemies.map(enemy => ({
                    x: enemy.x,
                    y: enemy.y,
                    type: enemy.type,
                    health: enemy.health
                })),
                grid: gameState.grid,
                rooms: gameState.rooms
            };
            
            document.getElementById('importExportData').value = JSON.stringify(saveData);
        }

        // Import game data
        function importGame() {
            try {
                const importData = document.getElementById('importExportData').value;
                const data = JSON.parse(importData);
                
                if (!data.wave || !data.player || !data.enemies || !data.grid || !data.rooms) {
                    alert("Invalid game data format!");
                    return;
                }
                
                gameState.currentWave = data.wave;
                
                // Restore player
                const player = gameState.players[gameState.playerId];
                player.x = data.player.x;
                player.y = data.player.y;
                player.health = data.player.health;
                player.score = data.player.score;
                
                // Restore enemies
                gameState.enemies = data.enemies.map(e => {
                    const enemy = new Enemy(e.x, e.y, e.type, gameState.currentWave);
                    enemy.health = e.health;
                    return enemy;
                });
                
                gameState.grid = data.grid;
                gameState.rooms = data.rooms;
                gameState.enemiesRemaining = gameState.enemies.length;
                
                updateUI();
                
                document.getElementById('importExportPopup').classList.add('hidden');
                document.getElementById('mainMenu').classList.add('hidden');
                document.getElementById('gameUI').classList.remove('hidden');
                gameState.scene = 'game';
                
                return true;
            } catch (error) {
                alert("Error importing game data: " + error.message);
                return false;
            }
        }

        // Game loop
        let lastTime = 0;
        function gameLoop(timestamp) {
            const deltaTime = timestamp - lastTime;
            lastTime = timestamp;
            
            // Only update game if in game scene
            if (gameState.scene === 'game') {
                updateGame(deltaTime);
                drawGame();
                
                // Save game every 10 seconds
                gameState.gameTime += deltaTime;
                if (gameState.gameTime > 10000) {
                    saveGame();
                    gameState.gameTime = 0;
                }
            }
            
            requestAnimationFrame(gameLoop);
        }

        function updateGame(deltaTime) {
            // Update player
            const player = gameState.players[gameState.playerId];
            player.update(keys);
            
            // Update enemies
            for (let i = gameState.enemies.length - 1; i >= 0; i--) {
                const enemy = gameState.enemies[i];
                enemy.update(gameState.players);
                
                // Check collision with player
                if (enemy.checkCollision(player)) {
                    player.health -= 0.1 * deltaTime / 16; // Damage over time when touching player
                    
                    // Game over if health <= 0
                    if (player.health <= 0) {
                        gameOver();
                    }
                }
                
                // Check collision with bullets
                for (let j = player.bullets.length - 1; j >= 0; j--) {
                    const bullet = player.bullets[j];
                    if (enemy.checkBulletCollision(bullet)) {
                        enemy.health -= bullet.damage;
                        player.bullets.splice(j, 1);
                        
                        // If enemy health <= 0, remove enemy
                        if (enemy.health <= 0) {
                            player.score += enemy.scoreValue;
                            gameState.enemies.splice(i, 1);
                            gameState.enemiesRemaining--;
                            
                            // Check if wave is complete
                            if (gameState.enemies.length === 0) {
                                if (gameState.currentWave < 10) {
                                    // Start next wave
                                    setTimeout(() => {
                                        generateWave(gameState.currentWave + 1);
                                    }, 2000);
                                } else {
                                    // Game completed
                                    gameWin();
                                }
                            }
                        }
                        break;
                    }
                }
            }
            
            // Update Firebase with player position if in multiplayer
            if (gameState.isMultiplayer) {
                gameState.gameRef.child('players/' + gameState.playerId).update({
                    x: player.x,
                    y: player.y,
                    health: player.health,
                    direction: player.direction
                });
            }
            
            // Update UI
            updateUI();
        }

        function drawGame() {
            // Clear canvas
            ctx.fillStyle = '#111';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid (dungeon)
            if (gameState.grid) {
                const tileSize = 20;
                
                for (let y = 0; y < gameState.grid.length; y++) {
                    for (let x = 0; x < gameState.grid[y].length; x++) {
                        if (gameState.grid[y][x] === 1) {
                            // Draw wall
                            ctx.fillStyle = '#333';
                            ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
                        } else {
                            // Draw floor
                            ctx.fillStyle = '#222';
                            ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
                        }
                    }
                }
            }
            
            // Draw enemies
            gameState.enemies.forEach(enemy => {
                enemy.draw();
            });
            
            // Draw all players
            for (const id in gameState.players) {
                gameState.players[id].draw();
            }
            
            // Draw wave info
            ctx.fillStyle = 'white';
            ctx.font = '16px Arial';
            ctx.fillText(`Wave: ${gameState.currentWave}/10`, 10, 30);
            ctx.fillText(`Enemies: ${gameState.enemies.length}`, 10, 60);
            ctx.fillText(`Health: ${Math.floor(gameState.players[gameState.playerId].health)}`, 10, 90);
            ctx.fillText(`Score: ${gameState.players[gameState.playerId].score}`, 10, 120);
        }

        function gameOver() {
            gameState.scene = 'gameOver';
            document.getElementById('gameOverStats').textContent = 
                `Wave: ${gameState.currentWave}/10 | Score: ${gameState.players[gameState.playerId].score}`;
            document.getElementById('gameOverMenu').classList.remove('hidden');
            document.getElementById('gameUI').classList.add('hidden');
            
            // Save high score
            const highScore = localStorage.getItem('dungeonCrawlerHighScore') || 0;
            if (gameState.players[gameState.playerId].score > highScore) {
                localStorage.setItem('dungeonCrawlerHighScore', gameState.players[gameState.playerId].score);
            }
            
            // Remove from Firebase if multiplayer
            if (gameState.isMultiplayer) {
                gameState.gameRef.child('players/' + gameState.playerId).remove();
            }
        }

        function gameWin() {
            gameState.scene = 'gameOver';
            document.getElementById('gameOverStats').textContent = 
                `YOU WIN! | Score: ${gameState.players[gameState.playerId].score}`;
            document.getElementById('gameOverMenu').classList.remove('hidden');
            document.getElementById('gameUI').classList.add('hidden');
            
            // Save high score
            const highScore = localStorage.getItem('dungeonCrawlerHighScore') || 0;
            if (gameState.players[gameState.playerId].score > highScore) {
                localStorage.setItem('dungeonCrawlerHighScore', gameState.players[gameState.playerId].score);
            }
            
            // Remove from Firebase if multiplayer
            if (gameState.isMultiplayer) {
                gameState.gameRef.child('players/' + gameState.playerId).remove();
            }
        }

        // Firebase multiplayer functions
        function setupMultiplayer() {
            gameState.isMultiplayer = true;
            
            // Listen for other players
            gameState.gameRef.child('players').on('child_added', (snapshot) => {
                const playerId = snapshot.key;
                const playerData = snapshot.val();
                
                if (playerId !== gameState.playerId && !gameState.players[playerId]) {
                    // Create new player object for other player
                    gameState.players[playerId] = new Player(playerId, playerData.x, playerData.y);
                    gameState.players[playerId].health = playerData.health;
                    gameState.players[playerId].direction = playerData.direction;
                    
                    updateUI();
                }
            });
            
            // Listen for player updates
            gameState.gameRef.child('players').on('child_changed', (snapshot) => {
                const playerId = snapshot.key;
                const playerData = snapshot.val();
                
                if (playerId !== gameState.playerId && gameState.players[playerId]) {
                    // Update other player
                    gameState.players[playerId].x = playerData.x;
                    gameState.players[playerId].y = playerData.y;
                    gameState.players[playerId].health = playerData.health;
                    gameState.players[playerId].direction = playerData.direction;
                }
            });
            
            // Listen for players leaving
            gameState.gameRef.child('players').on('child_removed', (snapshot) => {
                const playerId = snapshot.key;
                
                if (gameState.players[playerId]) {
                    delete gameState.players[playerId];
                    updateUI();
                }
            });
            
            // Listen for wave changes
            gameState.gameRef.child('wave').on('value', (snapshot) => {
                const newWave = snapshot.val();
                
                if (newWave && newWave !== gameState.currentWave) {
                    generateWave(newWave);
                }
            });
        }

        // Event listeners for UI buttons
        document.getElementById('newGameBtn').addEventListener('click', () => {
            document.getElementById('mainMenu').classList.add('hidden');
            document.getElementById('gameUI').classList.remove('hidden');
            gameState.scene = 'game';
            init();
        });

        document.getElementById('continueGameBtn').addEventListener('click', () => {
            if (loadGame()) {
                document.getElementById('mainMenu').classList.add('hidden');
                document.getElementById('gameUI').classList.remove('hidden');
                gameState.scene = 'game';
            } else {
                alert('No saved game found!');
            }
        });

        document.getElementById('importExportBtn').addEventListener('click', () => {
            document.getElementById('importExportPopup').classList.remove('hidden');
            
            // If there's a current game, populate export data
            if (gameState.currentWave > 0) {
                exportGame();
            }
        });

        document.getElementById('exportBtn').addEventListener('click', () => {
            exportGame();
        });

        document.getElementById('importBtn').addEventListener('click', () => {
            importGame();
        });

        document.getElementById('closePopupBtn').addEventListener('click', () => {
            document.getElementById('importExportPopup').classList.add('hidden');
        });

        document.getElementById('restartBtn').addEventListener('click', () => {
            document.getElementById('gameOverMenu').classList.add('hidden');
            document.getElementById('gameUI').classList.remove('hidden');
            gameState.scene = 'game';
            init();
        });

        document.getElementById('mainMenuBtn').addEventListener('click', () => {
            document.getElementById('gameOverMenu').classList.add('hidden');
            document.getElementById('mainMenu').classList.remove('hidden');
            gameState.scene = 'mainMenu';
        });

        // Show main menu initially
        gameState.scene = 'mainMenu';
        
        // Check if game is being loaded from URL parameter
        const urlParams = new URLSearchParams(window.location.search);
        const importParam = urlParams.get('import');
        
        if (importParam) {
            try {
                document.getElementById('importExportData').value = decodeURIComponent(importParam);
                if (importGame()) {
                    // Successfully imported
                    document.getElementById('mainMenu').classList.add('hidden');
                    document.getElementById('gameUI').classList.remove('hidden');
                }
            } catch (e) {
                console.error("Failed to import game from URL: ", e);
            }
        }
    </script>
</body>
</html>


This 2D dungeon crawler game includes all the features you requested:

1. **10 Waves of Enemies**: The game has 10 waves with increasing difficulty.
2. **Firebase Multiplayer**: Connected to your Firebase project for real-time multiplayer.
3. **Custom Player Sprite**: Using the pixel art character you provided.
4. **Title Screen**: With options for new game, continue, and import/export.
5. **Save/Load System**: Automatically saves progress and lets you continue games.
6. **Import/Export Feature**: You can share dungeon layouts with others.

### How to Play:
- Use arrow keys to move
- Spacebar to shoot
- Defeat all enemies to progress to the next wave
- Each wave features a procedurally generated dungeon

### Game Features:
- Three enemy types: basic (red squares), fast (yellow triangles), and tank (purple circles)
- Multiplayer synchronizes player positions and game state
- Auto-saving every 10 seconds
- Score tracking based on enemies defeated

You can play this game in any modern browser. To share a dungeon with friends, use the export feature and send them the generated code, which they can import on their end.
